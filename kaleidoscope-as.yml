heat_template_version: 2014-10-16

description: >
  This is a template that creates a group for streaming servers, a chat master
  server, and a group for chat slave servers.
parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the instances
    default: serranos
  flavor_streaming:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: m1.small
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type
  flavor_chat:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: m1.small
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type
  image:
    type: string
    default: Ubuntu-14-04-64
    description: Name or ID of the image to use for the instances.
  private_net:
    type: string
    default: 01415d99-47d9-4546-a700-d5a4ffe1e5f1
    description: Id of the private network for the compute server
  private_subnet:
    type: string
    default: 3a6b6367-75de-49f4-9b07-5152c02a4956
    description: Id of the private sub network for the compute server
  public_net:
    type: string
    default: 911c6954-a343-4bb9-bef6-1c9e20798a9d
    description: Id of the public network for the compute server
  db_root_password:
    type: string
    label: Root password for MySQL
    description: Root password for MySQL
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_root_password must be between 1 and 41 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_root_password must contain only alphanumeric characters

resources:
  chat_sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: chat_server_sec
      description: Security group that allows Ping, SSH, and Chat
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 5222
        port_range_max: 5222
      - protocol: tcp
        port_range_min: 5269
        port_range_max: 5269
      - protocol: tcp
        port_range_min: 5280
        port_range_max: 5280

  streaming_sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: streaming_server_sec
      description: Security group that allows Ping, SSH, and RTSP
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 554
        port_range_max: 554
      - protocol: tcp
        port_range_min: 7070
        port_range_max: 7070
      - protocol: tcp
        port_range_min: 8000
        port_range_max: 8000
      - protocol: tcp
        port_range_min: 8001
        port_range_max: 8001
      - protocol: tcp
        port_range_min: 6970
        port_range_max: 65535

  streaming_public_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net }
      fixed_ips:
      - subnet_id: { get_param: private_subnet }
      security_groups:
      - {get_resource: streaming_sec_group}

  chat_public_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net }
      fixed_ips:
      - subnet_id: { get_param: private_subnet }
      security_groups:
      - {get_resource: chat_sec_group}

  streaming_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: streaming_public_port }

  chat_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: chat_public_port }

  streaming_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource:
        type: OS::Nova::Server
        properties:
          image: { get_param: image }
          flavor: { get_param: flavor_streaming }
          key_name: { get_param: key_name }
          networks:
            - port: { get_resource: streaming_public_port }
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          user_data_format: RAW
          user_data:
            str_replace:
              params:
                __public_ip__: {get_attr: [ streaming_floating_ip, floating_ip_address ]}
              template: |
                #!/bin/sh -ex
                echo "Update packages lists...";
                sudo apt-get update;

                echo "Installing Git and building packages...";
                sudo apt-get install -y build-essential git logrotate mysql-client-5.6;

                echo "Configuring logrotate...";
                sudo tee -a /etc/logrotate.conf <<EOF
                /home/ubuntu/easydss-logs/stats {
                    daily
                    copytruncate
                    rotate 3
                    compress
                    delaycompress
                    missingok
                }
                EOF
                echo "Logrotate configured daily, rotate 3, with compression";

                echo "Getting EasyDarwin Streaming Server files...";
                cd /opt;
                sudo git clone https://github.com/EasyDarwin/EasyDarwin.git;
                cd /opt/EasyDarwin;
                sudo git checkout a245348;
                echo "EasyDarwin Streaming Server downloaded";

                echo "Building EasyDarwin Streaming Server...";
                cd /opt/EasyDarwin/EasyDarwin;
                sudo chmod +x Buildit;
                sudo ./Buildit;
                echo "Building EasyDarwin Streaming Server... completed";

                echo "Making folder for on-demand videos...";
                sudo mkdir /opt/EasyDarwin/EasyDarwin/Movies;

                # Downloading demo video
                cd /opt/EasyDarwin/EasyDarwin/Movies;
                sudo wget https://raw.githubusercontent.com/dfserrano/KaleidoscopeOrchestration/master/streaming/Demo.mp4;
                echo "On-demand video folder created";

                # Assign public ip to eth0 interface
                sudo ip addr add dev eth0 __public_ip__

                echo "Attempting to run the streaming server...";
                sudo -u ubuntu mkdir /home/ubuntu/easydss-logs;
                sudo chmod 777 /home/ubuntu/easydss-logs;
                cd /opt/EasyDarwin/EasyDarwin;
                sudo ./EasyDarwin -c ./WinNTSupport/easydarwin.xml -D >> /home/ubuntu/easydss-logs/stats &
                echo "Streaming server running and ready to stream";

                # Register the server in table
                # TODO: Create schema to store list of available servers
                # TODO: Fix script to insert the new available servers (Change host of mysql db)
                # mysql -h 142.150.208.206 -u ejabberd --password="ejabberd" <<EOF
                # USE kaleidoscope;
                # INSERT INTO streaming_server(name) VALUES('__public_ip__');
                # EOF

      min_size: 1
      max_size: 2

  # TODO: Still has to configure startup sequence
  chat_master_server:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor_chat }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: chat_public_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __database_root_password__: { get_param: db_root_password }
            __domain__: {get_attr: [ chat_floating_ip, floating_ip_address ]}
          template: |
            #!/bin/bash -ex
            export DOMAIN="__domain__";
            export ERLANG_COOKIE="USRKGEXGWLRYETURKXRG";
            export LOCAL_IP=$(ifconfig eth0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}');

            echo "Update package lists...";
            sudo apt-get update;

            echo "Installing MySQL for XMPP server...";
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-server-5.6

            # configure MySQL root password
            mysqladmin -u root password "__database_root_password__"

            # Comment-out bind-address in /etc/mysql/my.cnf to allow remote connections
            sudo sed -i 's@bind-address@# bind-address@' /etc/mysql/my.cnf;

            # restart db
            sudo service mysql restart
            echo "Finished installation of MySQL";

            echo "Initializing database...";
            mysql -u root --password="__database_root_password__" <<EOF
            CREATE USER 'ejabberd'@'localhost' IDENTIFIED BY 'ejabberd';
            GRANT ALL PRIVILEGES ON *.* TO 'ejabberd'@'localhost' WITH GRANT OPTION;
            CREATE USER 'ejabberd'@'%' IDENTIFIED BY 'ejabberd';
            GRANT ALL PRIVILEGES ON *.* TO 'ejabberd'@'%' WITH GRANT OPTION;
            CREATE DATABASE ejabberd;
            EOF

            # Load database for XMPP server
            wget https://raw.githubusercontent.com/dfserrano/KaleidoscopeOrchestration/master/chat/mysql.sql;
            mysql -u ejabberd --password=ejabberd ejabberd < mysql.sql;
            echo "Database ready";

            echo "Installing ejabberd package...";
            cd /home/ubuntu
            sudo -u ubuntu wget https://www.process-one.net/downloads/downloads-action.php?file=/ejabberd/15.06/ejabberd_15.06-0_amd64.deb;
            sudo -u ubuntu mv downloads-action.php?file=%2Fejabberd%2F15.06%2Fejabberd_15.06-0_amd64.deb ejabberd_15.06-0_amd64.deb;
            sudo -u ubuntu sudo dpkg -i ejabberd_15.06-0_amd64.deb;
            echo "ejabberd package installed";

            echo "Configuring ejabberd...";
            # Change configuration file ejabberd.yml
            sudo sed -i "/^hosts:/{n;s/.*/  - \"$DOMAIN\"/}" /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i "s@- \"admin\":.*@- \"admin\": \"$DOMAIN\"@" /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i 's@auth_method: internal@## auth_method: internal@' /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i 's@## auth_method: odbc@auth_method: odbc@' /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i 's@## odbc_type: mysql@odbc_type: mysql@' /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i "/odbc_type: mysql/{n;s/.*/odbc_server: \"$LOCAL_IP\"/}" /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i "/odbc_server: \"$LOCAL_IP\"/{n;s/.*/odbc_database: \"ejabberd\"/}" /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i '/odbc_database: \"ejabberd\"/{n;s/.*/odbc_username: \"ejabberd\"/}' /opt/ejabberd-15.06/conf/ejabberd.yml;
            sudo sed -i '/odbc_username: \"ejabberd\"/{n;s/.*/odbc_password: \"ejabberd\"/}' /opt/ejabberd-15.06/conf/ejabberd.yml;

            # Change hostname in ejabberdctl.cfg
            sudo sed -i "s/#ERLANG_NODE=ejabberd@localhost/ERLANG_NODE=ejabberd@$LOCAL_IP/" /opt/ejabberd-15.06/conf/ejabberdctl.cfg;

            # Change hostname in ejabberdctl
            sudo sed -i "s/ERLANG_NODE=ejabberd@localhost/ERLANG_NODE=ejabberd@$LOCAL_IP/" /opt/ejabberd-15.06/bin/ejabberdctl;
            echo "Finished configuration";

            # Change file owners
            sudo chown -R ubuntu:ubuntu /opt/ejabberd-15.06

            echo "Attempting to run the chat server...";

            # Create a cookie
            # - Best solution, due to some problems installing it from root
            sudo touch /root/.erlang.cookie
            echo $ERLANG_COOKIE > /root/.erlang.cookie
            sudo chmod 700 /root/.erlang.cookie
            sudo cp /root/.erlang.cookie /home/ubuntu/.erlang.cookie

            sudo /opt/ejabberd-15.06/bin/ejabberdctl start;
            sleep 60;
            sudo /opt/ejabberd-15.06/bin/ejabberdctl status;

            echo "Chat server running";
            echo "Check chat server status using ejabberdctl status";

            echo "Creating a copy of the cookie that can be copied by the slaves...";
            sudo chown ubuntu:ubuntu /home/ubuntu/.erlang.cookie
            sudo chmod 777 /home/ubuntu/.erlang.cookie;
            cp /home/ubuntu/.erlang.cookie /home/ubuntu/.erlang.cookie.copy;
            sudo chmod 700 /home/ubuntu/.erlang.cookie;

            # create admin user
            sudo /opt/ejabberd-15.06/bin/ejabberdctl register admin $DOMAIN admin;
            # echo "Admin Web UI available at http://$DOMAIN:5280/admin/";

  chat_slave_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource:
        type: OS::Nova::Server
        properties:
          image: { get_param: image }
          flavor: { get_param: flavor_chat }
          key_name: { get_param: key_name }
          security_groups:
            - {get_resource: chat_sec_group}
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          user_data_format: RAW
          user_data:
            str_replace:
              params:
                __database_root_password__: { get_param: db_root_password }
                __domain__: {get_attr: [ chat_floating_ip, floating_ip_address ]}
              template: |
                #!/bin/bash -ex
                export DOMAIN="__domain__";
                export ERLANG_COOKIE="USRKGEXGWLRYETURKXRG";
                export LOCAL_IP=$(ifconfig eth0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}');

                echo "Update package lists...";
                sudo apt-get update;

                echo "Installing ejabberd package...";
                cd /home/ubuntu
                sudo -u ubuntu wget https://www.process-one.net/downloads/downloads-action.php?file=/ejabberd/15.06/ejabberd_15.06-0_amd64.deb;
                sudo -u ubuntu mv downloads-action.php?file=%2Fejabberd%2F15.06%2Fejabberd_15.06-0_amd64.deb ejabberd_15.06-0_amd64.deb;
                sudo -u ubuntu sudo dpkg -i ejabberd_15.06-0_amd64.deb;
                echo "ejabberd package installed";

                echo "Configuring ejabberd...";
                # Change configuration file ejabberd.yml
                sudo sed -i "/^hosts:/{n;s/.*/  - \"$DOMAIN\"/}" /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i "s@- \"admin\":.*@- \"admin\": \"$DOMAIN\"@" /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i 's@auth_method: internal@## auth_method: internal@' /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i 's@## auth_method: odbc@auth_method: odbc@' /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i 's@## odbc_type: mysql@odbc_type: mysql@' /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i "/odbc_type: mysql/{n;s/.*/odbc_server: \"$LOCAL_IP\"/}" /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i "/odbc_server: \"$LOCAL_IP\"/{n;s/.*/odbc_database: \"ejabberd\"/}" /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i '/odbc_database: \"ejabberd\"/{n;s/.*/odbc_username: \"ejabberd\"/}' /opt/ejabberd-15.06/conf/ejabberd.yml;
                sudo sed -i '/odbc_username: \"ejabberd\"/{n;s/.*/odbc_password: \"ejabberd\"/}' /opt/ejabberd-15.06/conf/ejabberd.yml;

                # Change hostname in ejabberdctl.cfg
                sudo sed -i "s/#ERLANG_NODE=ejabberd@localhost/ERLANG_NODE=ejabberd@$LOCAL_IP/" /opt/ejabberd-15.06/conf/ejabberdctl.cfg;

                # Change hostname in ejabberdctl
                sudo sed -i "s/ERLANG_NODE=ejabberd@localhost/ERLANG_NODE=ejabberd@$LOCAL_IP/" /opt/ejabberd-15.06/bin/ejabberdctl;
                echo "Finished configuration";

                # Change file owners
                sudo chown -R ubuntu:ubuntu /opt/ejabberd-15.06

                echo "Attempting to run the chat server...";

                # Create a cookie
                # - Best solution, due to some problems installing it from root
                sudo touch /root/.erlang.cookie
                echo $ERLANG_COOKIE > /root/.erlang.cookie
                sudo chmod 700 /root/.erlang.cookie
                sudo cp /root/.erlang.cookie /home/ubuntu/.erlang.cookie

                # Join cluster
                sleep 30;
                sudo /opt/ejabberd-15.06/bin/joincluster "ejabberd@$DOMAIN"
                sleep 10;

                # Start
                sudo /opt/ejabberd-15.06/bin/ejabberdctl start
                sleep 30;
                sudo /opt/ejabberd-15.06/bin/ejabberdctl status;

                echo "Chat (slave) server running";
                echo "Check chat server status using ejabberdctl status";

      min_size: 1
      max_size: 2

  streaming_scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: streaming_group}
      cooldown: 120
      scaling_adjustment: 1

  streaming_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 30% for 120 seconds
      meter_name: cpu_util
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 30
      alarm_actions:
        - {get_attr: [streaming_scale_up_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt

  chat_scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: chat_slave_group}
      cooldown: 120
      scaling_adjustment: 1

  streaming_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 30% for 120 seconds
      meter_name: cpu_util
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 30
      alarm_actions:
        - {get_attr: [chat_scale_up_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt

outputs:
  scale_up_streaming_url:
    description: >
      This URL is the webhook to scale up the group.  You can invoke
      the scale-up operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [streaming_scale_up_policy, alarm_url]}
  scale_up_chat_url:
    description: >
      This URL is the webhook to scale up the group.  You can invoke
      the scale-up operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [chat_scale_up_policy, alarm_url]}
