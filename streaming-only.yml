heat_template_version: 2014-10-16

description: Template to deploy a single streaming (EasyDSS) server

parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: Ubuntu-14-04-64
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: m1.small
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type
  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: serranos
  public_ip:
    type: string
    label: Public IP
    description: Public IP address for the server
    default: 142.150.208.206

resources:
  streaming_sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: streaming_server_sec
      description: Security group that allows Ping, SSH, and RTSP
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 554
        port_range_max: 554
      - protocol: tcp
        port_range_min: 7070
        port_range_max: 7070
      - protocol: tcp
        port_range_min: 8000
        port_range_max: 8000
      - protocol: tcp
        port_range_min: 8001
        port_range_max: 8001
      - protocol: tcp
        port_range_min: 6970
        port_range_max: 65535

  streaming_server:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      security_groups:
        - {get_resource: streaming_sec_group}
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __public_ip__: { get_param: public_ip }
          template: |
            #!/bin/sh -ex
            echo "Update packages lists...";
            sudo apt-get update;

            echo "Installing Git and building packages...";
            sudo apt-get install -y build-essential git logrotate;

            echo "Configuring logrotate...";
            sudo tee -a /etc/logrotate.conf <<EOF
            /home/ubuntu/easydss-logs/stats {
                daily
                copytruncate
                rotate 3
                compress
                delaycompress
                missingok
            }
            EOF
            echo "Logrotate configured daily, rotate 3, with compression";

            echo "Getting EasyDarwin Streaming Server files...";
            cd /opt;
            sudo git clone https://github.com/EasyDarwin/EasyDarwin.git;
            cd /opt/EasyDarwin;
            sudo git checkout a245348;
            echo "EasyDarwin Streaming Server downloaded";

            echo "Building EasyDarwin Streaming Server...";
            cd /opt/EasyDarwin/EasyDarwin;
            sudo chmod +x Buildit;
            sudo ./Buildit;
            echo "Building EasyDarwin Streaming Server... completed";

            echo "Making folder for on-demand videos...";
            sudo mkdir /opt/EasyDarwin/EasyDarwin/Movies;

            # Downloading demo video
            cd /opt/EasyDarwin/EasyDarwin/Movies;
            sudo wget https://raw.githubusercontent.com/dfserrano/KaleidoscopeOrchestration/master/streaming/Demo.mp4;
            echo "On-demand video folder created";

            # Assign public ip to eth0 interface
            sudo ip addr add dev eth0 __public_ip__

            echo "Attempting to run the streaming server...";
            sudo -u ubuntu mkdir /home/ubuntu/easydss-logs;
            sudo chmod 777 /home/ubuntu/easydss-logs;
            cd /opt/EasyDarwin/EasyDarwin;
            sudo ./EasyDarwin -c ./WinNTSupport/easydarwin.xml -D >> /home/ubuntu/easydss-logs/stats &
            echo "Streaming server running and ready to stream";

outputs:
  instance_name:
    description: Name of the instance
    value: { get_attr: [streaming_server, name] }
  instance_ip:
    description: IP address of the instance
    value: { get_attr: [streaming_server, first_address] }
